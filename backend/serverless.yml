service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    USER_INDEX: UserCreatedIndex
    TODO_ITEM_ATTACHMENTS_BUCKET: todo-attachments-mkhill-${self:provider.stage}
    BUCKET_AWS_REGION: us-east-1

  tracing:
    lambda: true
    apiGateway: true

package:
  individually: true
  excludeDevDependencies: true

functions:
  Auth:
    environment:
      AUTH0_URL: ${env:SLS_TODO_AUTH0_URL}
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'xray:PutTelemetryRecords'
        Resource: '*'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
        Resource: '*'

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_INDEX}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTelemetryRecords'
        Resource: '*'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
        Resource: '*'

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schema:
              'application/json': ${file(models/CreateTodoRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTelemetryRecords'
        Resource: '*'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
        Resource: '*'

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schema:
              'application/json': ${file(models/UpdateTodoRequest.json)}

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTelemetryRecords'
        Resource: '*'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
        Resource: '*'

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTelemetryRecords'
        Resource: '*'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
        Resource: '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.TODO_ITEM_ATTACHMENTS_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTelemetryRecords'
        Resource: '*'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
        Resource: '*'

resources:
  Resources:
    RequestBodyValidator:
      Type: 'AWS::ApiGateway::RequestValidator'
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    TodoItemAttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODO_ITEM_ATTACHMENTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref TodoItemAttachmentsBucket
        PolicyDocument:
          Id: sls-todo-s3-policy
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODO_ITEM_ATTACHMENTS_BUCKET}/*'

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
